// ## Clearfix
@mixin clearfix() {
    *zoom: 1;

    &:before, &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

// ## Triangle
@mixin triangle($direction, $size: 0.375rem, $color: #222) {
    content: '';
    display: block;
    position: absolute;
    height: 0; width: 0;

    @if ($direction == 'up'){
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction == 'down'){
        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction == 'left'){
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction == 'right'){
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
}

// ##  Media Queries
@mixin breakpoint($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

// ## Responsive typography
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
    
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        
        @if $fs-breakpoint == null {
            @include make-font-size($fs-font-size);
        
        } @else {

            // If $fs-font-size is a key that exists in
            // $fs-breakpoints, use the value
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }

            @media screen and (min-width: $fs-breakpoint) {
                @include make-font-size($fs-font-size);
            }
        }
    }
}

//## Aspect Ratio
@mixin aspect-ratio($width, $height) {
    position: relative;

    &:before {
        content: "";
        display: block;
        width: 100%;
        padding-top: ($height/$width) * 100%;
    }
}